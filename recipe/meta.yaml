{% set version = "2.0.0" %}
{% set libversion = "4" %}
{% set library = "Library/" if win else "" %}

package:
  name: libmirisdr-split
  version: {{ version }}

source:
  url: https://github.com/f4exb/libmirisdr-4/archive/refs/tags/v{{ version }}.tar.gz
  sha256: c9fa00737f37de788873248c71dd653b0e9c043aed70620ea17cfde8894be2df
  patches:
    - 0001-miri_fm-Don-t-define-round-for-MSVC-use-version-prov.patch
    - 0002-Rename-mirisdr.dll-to-mirisdr-4.dll-on-Windows.patch

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - cmake
    - ninja
    - pkg-config
  host:
    - libusb
    - pthreads-win32  # [win]

outputs:
  - name: libmirisdr{{ libversion }}
    requirements:
      build:
        - {{ compiler('c') }}
      host:
        - libusb
        - pthreads-win32  # [win]
      run:
        - pthreads-win32  # [win]
    files:
      - lib/libmirisdr.so.{{ libversion }}*  # [linux]
      - lib/libmirisdr.{{ libversion }}*.dylib  # [osx]
      - Library/bin/mirisdr-{{ libversion }}*.dll  # [win]
    test:
      commands:
        # verify that libraries get installed
        - test -f $PREFIX/lib/libmirisdr.so.{{ libversion }}  # [linux]
        - test -f $PREFIX/lib/libmirisdr.{{ libversion }}.dylib  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\mirisdr-{{ libversion }}.dll exit 1  # [win]
  - name: libmirisdr
    build:
      run_exports:
        - {{ pin_subpackage('libmirisdr' + libversion, max_pin=False) }}
    requirements:
      build:
        - {{ compiler('c') }}
      host:
        - {{ pin_subpackage('libmirisdr' + libversion, exact=True) }}
      run:
        - {{ pin_subpackage('libmirisdr' + libversion, exact=True) }}
    files:
      - {{ library }}include/mirisdr.h
      - {{ library }}include/mirisdr_export.h
      - lib/libmirisdr.so  # [linux]
      - lib/libmirisdr.dylib  # [osx]
      - Library/lib/mirisdr.lib  # [win]
      - {{ library }}lib/pkgconfig/libmirisdr.pc
    test:
      commands:
        # verify that headers get installed
        - test -f $PREFIX/include/mirisdr.h  # [not win]
        - test -f $PREFIX/include/mirisdr_export.h  # [not win]
        - if not exist %PREFIX%\\Library\\include\\mirisdr.h exit 1  # [win]
        - if not exist %PREFIX%\\Library\\include\\mirisdr_export.h exit 1  # [win]

        # verify that import libraries get installed
        - test -f $PREFIX/lib/libmirisdr${SHLIB_EXT}  # [not win]
        - if not exist %PREFIX%\\Library\\lib\\mirisdr.lib exit 1  # [win]

        # verify that pkgconfig files get installed
        - test -f $PREFIX/lib/pkgconfig/libmirisdr.pc  # [unix]
        - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\libmirisdr.pc exit 1  # [win]
  - name: mirisdr
    build:
      # instructions for manually linking udev rules
      post-link: post-link  # [linux]
    requirements:
      build:
        - {{ compiler('c') }}
      host:
        - {{ pin_subpackage('libmirisdr' + libversion, exact=True) }}
      run:
        - {{ pin_subpackage('libmirisdr' + libversion, exact=True) }}
        - pthreads-win32  # [win]
    files:
      - {{ library }}bin/miri_fm*
      - {{ library }}bin/miri_sdr*
      - lib/udev/rules.d/mirisdr.rules  # [linux]
    test:
      commands:
        # verify that commands run
        {% set cmds = ["miri_fm", "miri_sdr"] %}
        {% for cmd in cmds %}
        - {{ cmd }} -h || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi  # [not win]
        - {{ cmd }} -h || if !ERRORLEVEL! LEQ 1 cmd /c "exit /b 0"  # [win]
        {% endfor %}

        # verify that udev rule gets installed
        - test -f $PREFIX/lib/udev/rules.d/mirisdr.rules  # [linux]

about:
  home: https://github.com/f4exb/libmirisdr-4/
  license: GPL-2.0-or-later
  license_file: COPYING
  summary: Driver for Mirics MSi001 + MSi2500 SDR devices
  description: >
    This software supports Software Defined Radio (SDR) devices based on the Mirics MSi001 + MSi2500 chipsets, including some SDRplay devices:

      - `libmirisdr{{ libversion }}` contains the library for mirisdr devices
      - `libmirisdr` contains the development files for compiling against the mirisdr library
      - `mirisdr` contains command line tools for using the devices

    For Linux users of `mirisdr`, you will likely want to link the provided udev rule into your system installation in order for the hardware to have the correct permissions:

        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/mirisdr.rules /etc/udev/rules.d/
        sudo udevadm control --reload
        sudo udevadm trigger

    You may have to restart for this change to take effect.

extra:
  feedstock-name: libmirisdr
  recipe-maintainers:
    - ryanvolz
